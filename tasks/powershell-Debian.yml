- name: Download MS product repository
  get_url:
    url: https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
    dest: /tmp/packages-microsoft-prod.deb

- name: Install MS product repository
  ansible.builtin.apt:
    deb: /tmp/packages-microsoft-prod.deb
  become: true

- name: Copy preferences to install dotnet from microsoft repo
  ansible.builtin.copy:
    src: etc/apt/preferences
    dest: /etc/apt/preferences
    force: true
  become: true

- name: Install PowerShell
  become: true
  ansible.builtin.apt:
    name: powershell
    state: latest
    update_cache: true

- name: Install dotnet-sdk 7
  become: true
  ansible.builtin.apt:
    name: dotnet-sdk-7.0
    state: latest
    update_cache: true

- name: Instal azure-cli using command
  ansible.builtin.shell: |
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  register: shell_output

- name: register azure modules existence
  ansible.builtin.shell: pwsh -c "Get-Module -ListAvailable" | awk 'BEGIN{cnt=0} /Azure/{ cnt++ } END{if (cnt >= 1) {print "1"} else {print "0"}}'
  register: azure_pwsh_module
  changed_when: false

- name: Update pwsh help
  ansible.builtin.command: "pwsh -noni -c 'Update-Help'"
  register: pwsh_update
  changed_when:
    - pwsh_update.stdout != ""

- name: Set trusted psgallery repo
  ansible.builtin.command: "pwsh -noni -c 'Set-PSRepository -Name psgallery -InstallationPolicy Trusted'"

- name: Install pwsh azure modules
  ansible.builtin.command: "{{ item }}"
  become: true
  become_user: "alex"
  with_items:
    - "pwsh -noni -c 'Install-Module PSReadLine'"
    - "pwsh -noni -c 'Install-Module Posh-Git'"
    - "pwsh -noni -c 'Install-Module Terminal-Icons'"
    - "pwsh -noni -c 'Install-Module Pester'"
    - "pwsh -noni -c 'Install-Module psake'"
    - "pwsh -noni -c 'Install-Module PSScriptAnalyzer'"
    - "pwsh -noni -c 'Install-Module AZ'"
    - "pwsh -noni -c 'Install-Module PSFzf'"
    - "pwsh -noni -c 'Install-Module DockerCompletion'"
    - "pwsh -noni -c 'Install-Module Az.Tools.Predictor'"
    - "pwsh -noni -c 'Install-Module -Name PSDesiredStateConfiguration -RequiredVersion 3.0.0-beta1 -AllowPrerelease'"
    - "pwsh -noni -c 'Install-Module -Name GuestConfiguration'"
  when:
    - azure_pwsh_module.stdout == "0"
    #    - pwsh_install_azure_cli|default(false)

- name: Install azurite
  community.general.npm:
      name: azurite
      global: true

